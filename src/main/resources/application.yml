server:
  port: ${PORT}
spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    open-in-view: false
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      timeout: 60000
      use-redis-cache: true
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
  mail:
    mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      timeout: 60000
      use-redis-cache: true

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: e-commerce-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.project.e_commerce.model,com.project.e_commerce.dtos
  autoconfigure:
    exclude:
      - io.awspring.cloud.autoconfigure.ses.SesAutoConfiguration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile,email
            redirect-uri: "{baseUrl}/api/v1/login/oauth2/code/google"
#          facebook:
            #client-id: ${FACEBOOK_CLIENT_ID}
            #client-secret: ${FACEBOOK_CLIENT_SECRET}
#            scope: email,public_profile
#            redirect-uri: "{baseUrl}/api/v1/login/oauth2/code/facebook"
        provider:
          facebook:
            user-info-uri: https://graph.facebook.com/me?fields=id,name,email
      
api:
  prefix: /api/v1
stripe:
  secret:
    key: ${STRIPE_API}
#  public:
#    key: ${STRIPE_PUBLIC_KEY}
#  webhook:
#    secret: ${STRIPE_WEBHOOK_SECRET}
  currency:
    unit: usd
  payment:
    method: card,bank_transfer
    currency: usd

security:
  account:
    max-failed-attempts: 5
    lockout-duration-minutes: 30

jwt:
  expiration: ${JWT_EXPIRATION} # seconds
  secretKey: ${JWT_SECRET_KEY}
  refreshTokenExpirationMs: ${JWT_REFRESH_TOKEN}
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: e-commerce-api
  prometheus:
    metrics:
      export:
        enabled: true

# AWS Configuration
# cloud:
#   aws:
#     region:
#       static: us-east-1
#       auto: false
#     stack:
#       auto: false
#     credentials:
#       access-key: ${AWS_ACCESS_KEY}
#       secret-key: ${AWS_SECRET_KEY}

# Comment this exclusion to use SES configuration
#  autoconfigure:
#    exclude:
#      - io.awspring.cloud.autoconfigure.ses.SesAutoConfiguration

